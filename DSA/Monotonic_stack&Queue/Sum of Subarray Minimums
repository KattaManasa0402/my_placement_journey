class Solution {
public:
    vector<int> getNSL(vector<int>arr,int n){
            stack<int>st;
        vector<int>result(n);
        for(int i=0;i<n;i++){
            if(st.empty()){
                result[i]=-1;
            }
            else{
                while(!st.empty() && arr[st.top()]>arr[i]){
                    st.pop();
                }
                result[i]=st.empty() ? -1:st.top();
            }
            st.push(i);
        }
        return result;
    }
    vector<int> getNSR(vector<int>arr,int n){
            stack<int>st;
        vector<int>result(n);
        for(int i=n-1;i>=0;i--){
            if(st.empty()){
                result[i]=n;
            }
            else{
                while(!st.empty() && arr[st.top()]>=arr[i]){
                    st.pop();
                }
                result[i]=st.empty() ? n:st.top();
            }
            st.push(i);
        }
        return result;
    }
    int sumSubarrayMins(vector<int>& arr) {
        //find out next smallest on left
        int n=arr.size();
        long long sum=0;
        long long mod=1e9+7;
        vector<int>NSL=getNSL(arr,n);
        vector<int>NSR=getNSR(arr,n);
        for(int i=0;i<n;i++){
            long long ls=i-NSL[i];
            long long rs=NSR[i]-i;
            long long totalways=ls*rs;
            long long totalsum=totalways*arr[i];
            sum=(sum+totalsum)%mod;
            
        }
        return sum;
        
    }
};
