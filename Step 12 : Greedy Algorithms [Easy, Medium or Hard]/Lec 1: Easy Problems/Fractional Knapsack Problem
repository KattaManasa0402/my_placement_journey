// https://www.geeksforgeeks.org/problems/fractional-knapsack-1587115620/1

// in this question we use comparators - so basically if u want to sort a particular array based on a condition or like increasing or 
// decreasing order - then use this comparator function 


class Solution {
  public:
    double fractionalKnapsack(vector<int>& val, vector<int>& wt, int capacity) {
        
     int n=val.size();
     vector<int>idx(n,0);
     iota(idx.begin(),idx.end(),0);
     sort(idx.begin(),idx.end(),[&](int i,int j){
        return (long long)val[i]*wt[j]>(long long)val[j]*wt[i]; 
     });
     double tv=0;
     for(auto &it:idx){
         if(wt[it]<=capacity){
             tv+=val[it];
             capacity-=wt[it];
         }
         else{
             tv+=(double)val[it]/wt[it]*capacity;
             break;
         }
     }
     return tv;
    }
};


//Using the struct method 
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
#include<bits/stdc++.h>

struct Item{
    int value;
    int weight;
};
class Main{
    public:
     bool comp(Item a,Item b){
        double r1=(double)a.value/a.weight;
        double r2=(double)b.value/b.weight;
        return r1>r2;
    }
    double func(Item arr[],int capacity,int n){
        sort(arr,arr+n,comp);
        double  sol=0.0;
        for(int i=0;i<n;i++){
            if(arr[i].weight<=capacity){
                sol+=arr[i].value;
                capacity-=arr[i].weight;
            }
            else{
                sol+=(double)arr[i].value/arr[i].weight*capacity;
                break;
            }
        }
        return sol;
    }
};

int main() {
    int n=3;
    int capacity=50;
    Item arr[n]={{60,10},{100,20},{120,30}};
    Main obj;
    double sol=obj.func(arr,capacity,n);
    cout<<fixed<<setprecision(2)<<sol;
    return 0;
}
