class Solution {
public:
    ListNode* reverse(ListNode* head){
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* newNode=reverse(head->next);
        ListNode* front=head->next;
        front->next=head;
        head->next=NULL;
        return newNode;
    }
    bool isPalindrome(ListNode* head) {
        if(head->next==NULL){
            return true;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode* newnode=reverse(slow->next);
        ListNode* first=head;
        ListNode* second=newnode;
        while(second!=NULL){
        if(first->val!=second->val){
            reverse(newnode);
            return false;
        }
            first=first->next;
            second=second->next;
        }
        reverse(newnode);
        return true;
        
    }
};
