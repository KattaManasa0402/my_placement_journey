//BRUTE FORCE APPROACH - HASHING 
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *t1=headA;
        ListNode *t2=headB;
        unordered_map <ListNode*,int>mpp;
        while(t1!=NULL){
            mpp[t1]=1;
            t1=t1->next;
        }
        while(t2!=NULL){
            if(mpp.find(t2)!=mpp.end()){
                return t2;
                break;
            }
            else{
                mpp[t2]=1;
                t2=t2->next;
            }
        }
        return NULL;
    }
};

//BETTER APPROACH 
class Solution {
public:
     ListNode* func(ListNode* t1,int d){
            while(d){
                t1=t1->next;
                d--;
            }
            return t1;
        }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *t1=headA;
        ListNode *t2=headB;
        int n1=0;
        int n2=0;
        while(t1!=NULL){
            n1++;
            t1=t1->next;
        }
        while(t2!=NULL){
            n2++;
            t2=t2->next;
        }
        t1 = headA;
        t2 = headB;
        int d=n1-n2;
        if(n1>n2){
        t1= func(t1,n1-n2);
        }
        else{
            t2= func(t2,n2-n1);
        }
           while (t1 != NULL && t2 != NULL) {
            if (t1 == t2) return t1;
            t1 = t1->next;
            t2 = t2->next;
        }
       
        return NULL;
    }

};


//OPTIMAL APPROACH 
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *t1=headA;
        ListNode *t2=headB;
        while(t1!=t2){
            if(t1==NULL){
                 t1=headB;
            }
            else{
                t1=t1->next;
            }
              if(t2==NULL){
                 t2=headA;
            }
            else{
                t2=t2->next;
            }

        }
        return t1;
    }
};
