class Solution {
  public:
   Node* returnStartNode(Node* head){
       Node* slow=head;
       Node* fast=head;
       while(fast!=NULL && fast->next!=NULL){
           slow=slow->next;
           fast=fast->next->next;
           if(slow==fast){
               slow=head;
               while(slow!=fast){
                   slow=slow->next;
                   fast=fast->next;
               }
               return slow;
           }
       }
       return nullptr;
   }
    // Function to find the length of a loop in the linked list.
    int countNodesinLoop(struct Node *head) {
        Node* start_node=returnStartNode(head);
        if(start_node==NULL){
            return 0;
        }
        Node* temp=start_node;
        int c=1;
        while(temp->next!=start_node){
            c++;
            temp=temp->next;
        }
        return c;
    }
};
