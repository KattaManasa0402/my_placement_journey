// BRUTE FORCE  APPROACH BUT WILL SHOW TIME LIMIT EXCEEDED 
class Solution
{
public:
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        vector<pair<int,int>> p;
        Node* t1=head;
        Node* t2=head->next;
        while(t1!=NULL){
            t2=t1->next;
            while(t2!=NULL){
            if(t1->data + t2->data==target){
                p.push_back({t1->data,t2->data});
            }
            t2=t2->next;
        }
        t1=t1->next;
    }
    return p;
    }
};

// A LITTLE BETTER ONE - BUT STILL TIME LIMIT EXCEEDED 
class Solution
{
public:
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        vector<pair<int,int>> p;
        Node* t1=head;
        Node* t2=head->next;
        while(t1!=NULL){
            t2=t1->next;
            while(t2!=NULL && t1->data + t2->data<=target){
            if(t1->data + t2->data==target){
                p.push_back({t1->data,t2->data});
            }
            t2=t2->next;
        }
        t1=t1->next;
    }
    return p;
    }
};


//optimal approach 
class Solution
{
public:
    Node* findTail(Node* head){
            Node*tail=head;
            while(tail->next!=NULL){
                tail=tail->next;
            }
            return tail;
        }
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        vector<pair<int,int>> p;
        
        Node* t1=head;
        Node* t2=findTail(head);
        while(t1->data < t2->data){
            if(t1->data + t2->data==target){
                p.push_back({t1->data,t2->data});
                t1=t1->next;
                t2=t2->prev;
            }
            else if(t1->data + t2->data>target){
            t2=t2->prev;
            }
           else{
               t1=t1->next;
           }
    }
    return p;
    }
};

